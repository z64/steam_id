{"repository_name":"github.com/z64/steam_id","body":"# steam_id\n\nA library for parsing and serializing Steam IDs.\n\n- [Library docs](https://z64.github.io/steam_id/)\n- [SteamID official documentation](https://developer.valvesoftware.com/wiki/SteamID)\n\n## Background\n\nI wrote this library because:\n\n- Understanding Steam IDs can be confusing\n- A lot of libraries implement Steam IDs wrong\n- IDs encountered \"in the wild\" may be missing information, or \"wrong\"\n\nThe important detail to understand is that any observed Steam ID is *not* a\nunique identifier in the traditional sense. For an application that observes\nSteam IDs from *multiple* sources, it would be unwise to use a Steam ID as a\nprimary key, for instance.\n\n**A Steam ID is an integer that contains encoded account metadata. Depending\non how and where you observe a Steam ID, some of this metadata may be\nwrong or missing, but still refer to the same account.**\n\n## ID Formats\n\nAn ID can be represented in three main ways.\n\n1. As a 64 bit integer (`Steam::ID::Format::Community64`). ex: `76561197960287930`\n\n  This is a *lossless* format that contains *all* metadata. This is the format of\n  ID that is used when interacting with the Steam API.\n\n2. As a string (`Steam::ID::Format::Default`). ex: `STEAM_1:0:11101`\n\n  This is the standard \"textual\" format as described by the SteamID docs.\n\n  This is a *lossy* format that is missing account type and account instance.\n\n3. As a string (`Steam::ID::Format::Community32`). ex: `[U:1:22202]`\n\n  This is a special format for forming \"short\" URLs to Steam community\n  pages.\n\n  This is a *lossy* format that is missing account universe and account instance.\n\nIt's important to consider what your application needs, and whether the format\nyou are handling Steam IDs in contains that information. Each format encodes\nand *account ID* and is most likely what you want to use to uniquely identify\nusers, presumably within the same universe.\n\nI've included a fair amount of documentation on `Steam::ID::Format`, as well as\n`Steam::ID::Mask`, a low level set of structs for decoding/encoding Steam IDs,\nthat may help improve your understanding of the format.\n\n## Examples of manipulating IDs\n\nSometimes you may encounter \"wrongly\" encoded IDs that are somehow not encoded\nin a way that can be used with the Steam API. Here are a few \"real world\" examples of\nmanipulating IDs into a usable format.\n\n### Old Source games\n\nGames such as Garry's mod (and other GoldSrc, Orange Box games)  may always encode\n a universe of `STEAM_0`. Attempting to parse this ID, and then to call the API\n with the resulting 64 bit ID, will usually result in an error. You can see why\nin the example below.\n\nYou can use `Steam::ID#universe=` to re-encode the ID with the updated metadata:\n\n```crystal\nid = Steam::ID.new(\"STEAM_0:0:37170282\")\nid.universe # => Individual\nid.to_u64   # => 74340564_u64 (Can't be sent to the API..)\nid.universe = :public\nid.to_u64   # => 72057594112268500_u64 (OK!)\nid.to_s(Steam::ID::Format::Default) # => STEAM_1:0:37170282\n```\n\n### Discord API\n\nDiscord's OAuth2 API may return a Steam ID with the instance bit as `0`.\nWhile this is still a valid ID that will work in Steam's HTTP API, it will\nnot match Steam IDs you may have received from other sources.\n\nSimilarly, we can re-encode a corrected ID:\n\n```crystal\nid = Steam::ID.new(76561193739638996)\nid.instance # => 0\nid.instance = 1\nid.instace  #=> 1\nid.to_u64   # => 76561198034606292_u64\n```\n\n## Installation\n\nAdd this to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  steam_id:\n    github: z64/steam_id\n```\n\n## Usage\n\n```crystal\nrequire \"steam_id\"\n\n# Create an ID from a UInt64\nid = Steam::ID.new(76561198092541763)\nid.account_id   # => 66138017\nid.account_type # => Steam::ID::AcountType::Individual\nid.universe     # => Steam::ID::Universe::Public\nid.to_u64       # => 76561197960287930\n\n# For enum attributes, you can use interrogation style methods:\nid.universe.public? # => true\n\n# Parse an ID from an unknown format\nSteam::ID.new(\"STEAM_1:0:11101\") # => Steam::ID\nSteam::ID.new(\"foo\")             # => raises Steam::ID::Error\n\n# Parse an ID from a known format (better performance)\nSteam::ID.new(\"STEAM_1:0:11101\", Steam::ID::Format::Default)\n  # => Steam::ID\nSteam::ID.new(\"76561197960287930\", Steam::ID::Format::Default)\n  # => raises Steam::ID::Error\n```\n\n## Contributors\n\n- [Zac Nowicki](https://github.com/z64) - creator, maintainer\n","program":{"html_id":"github.com/z64/steam_id/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/z64/steam_id","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/z64/steam_id/Steam","path":"Steam.html","kind":"module","full_name":"Steam","name":"Steam","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"formatter.cr","line_number":1,"url":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/formatter.cr"}],"repository_name":"github.com/z64/steam_id","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/z64/steam_id/Steam/ID","path":"Steam/ID.html","kind":"struct","full_name":"Steam::ID","name":"ID","abstract":false,"superclass":{"html_id":"github.com/z64/steam_id/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/z64/steam_id/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/z64/steam_id/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/z64/steam_id/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"formatter.cr","line_number":1,"url":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/formatter.cr"},{"filename":"mask.cr","line_number":1,"url":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/mask.cr"},{"filename":"parser.cr","line_number":1,"url":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/parser.cr"},{"filename":"steam_id.cr","line_number":7,"url":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr"}],"repository_name":"github.com/z64/steam_id","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.2.0\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/z64/steam_id/Steam","kind":"module","full_name":"Steam","name":"Steam"},"doc":"A Steam ID is an encoded 64 bit integer that contains various metadata\nabout a Steam account.\n\nA given ID does not uniquely identify an account,\nas encoded IDs may be missing certain pieces of metadata if it was decoded\nfrom certain formats (see `Steam::ID::Format` for more info).","summary":"<p>A Steam ID is an encoded 64 bit integer that contains various metadata about a Steam account.</p>","class_methods":[],"constructors":[{"id":"new(string:String,format:Format)-class-method","html_id":"new(string:String,format:Format)-class-method","name":"new","doc":"Parses a string as the given `Format`. Raises `Error` if parsing fails.","summary":"<p>Parses a string as the given <code><a href=\"../Steam/ID/Format.html\">Format</a></code>.</p>","abstract":false,"args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":"String"},{"name":"format","doc":null,"default_value":"","external_name":"format","restriction":"Format"}],"args_string":"(string : String, format : Format)","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L103","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L103","def":{"name":"new","args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":"String"},{"name":"format","doc":null,"default_value":"","external_name":"format","restriction":"Format"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"value = 0_u64\nParser.parse(string) do\n  case format\n  when Format::Default\n    steam\n    value = (Mask::Universe.offset(consume_int)) | value\n    seperator\n    value = (Mask::LowestBit.offset(consume_int)) | value\n    seperator\n    value = (Mask::AccountID.offset(consume_int)) | value\n  when Format::Community32\n    bracket do\n      value = Mask::AccountType.offset(account_type.value.to_u64)\n      seperator\n      one\n      seperator\n      value = consume_int | value\n    end\n  when Format::Community64\n    value = consume_int\n  end\nend\nnew(value)\n"}},{"id":"new(value:UInt64)-class-method","html_id":"new(value:UInt64)-class-method","name":"new","doc":"Create a Steam ID from a 64 bit value","summary":"<p>Create a Steam ID from a 64 bit value</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"UInt64"}],"args_string":"(value : UInt64)","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L86","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L86","def":{"name":"new","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"UInt64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(string:String)-class-method","html_id":"new(string:String)-class-method","name":"new","doc":"Attempts to parse the given string as an ID of any of `Format`. Raises\n`Error` if no format parses well.","summary":"<p>Attempts to parse the given string as an ID of any of <code><a href=\"../Steam/ID/Format.html\">Format</a></code>.</p>","abstract":false,"args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":"String"}],"args_string":"(string : String)","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L91","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L91","def":{"name":"new","args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Format.each do |format|\n  begin\n    return new(string, format)\n  rescue Parser::Error\n  end\nend\nraise(Error.new(\"Unknown Steam ID format: #{string}\"))\n"}}],"instance_methods":[{"id":"account_id(with_lowest_bit:Bool=false)-instance-method","html_id":"account_id(with_lowest_bit:Bool=false)-instance-method","name":"account_id","doc":"The account ID this `ID` represents","summary":"<p>The account ID this <code><a href=\"../Steam/ID.html\">ID</a></code> represents</p>","abstract":false,"args":[{"name":"with_lowest_bit","doc":null,"default_value":"false","external_name":"with_lowest_bit","restriction":"Bool"}],"args_string":"(with_lowest_bit : Bool = <span class=\"n\">false</span>)","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L172","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L172","def":{"name":"account_id","args":[{"name":"with_lowest_bit","doc":null,"default_value":"false","external_name":"with_lowest_bit","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"value = Mask::AccountID.extract_from(@value)\nif with_lowest_bit\n  (value << 1) + lowest_bit\nelse\n  value\nend\n"}},{"id":"account_type-instance-method","html_id":"account_type-instance-method","name":"account_type","doc":"The `AccountType` this `ID` represents","summary":"<p>The <code><a href=\"../Steam/ID/AccountType.html\">AccountType</a></code> this <code><a href=\"../Steam/ID.html\">ID</a></code> represents</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L192","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L192","def":{"name":"account_type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"AccountType.new(Mask::AccountType.extract_from(@value))"}},{"id":"account_type=(new_value:AccountType)-instance-method","html_id":"account_type=(new_value:AccountType)-instance-method","name":"account_type=","doc":"Re-encodes this ID with an updated `AccountType`","summary":"<p>Re-encodes this ID with an updated <code><a href=\"../Steam/ID/AccountType.html\">AccountType</a></code></p>","abstract":false,"args":[{"name":"new_value","doc":null,"default_value":"","external_name":"new_value","restriction":"AccountType"}],"args_string":"(new_value : AccountType)","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L197","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L197","def":{"name":"account_type=","args":[{"name":"new_value","doc":null,"default_value":"","external_name":"new_value","restriction":"AccountType"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@value = calculate_id(account_id(true), instance, new_value, universe)"}},{"id":"instance-instance-method","html_id":"instance-instance-method","name":"instance","doc":"The instance of this account","summary":"<p>The instance of this account</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L182","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L182","def":{"name":"instance","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Mask::Instance.extract_from(@value)"}},{"id":"instance=(new_value:UInt64)-instance-method","html_id":"instance=(new_value:UInt64)-instance-method","name":"instance=","doc":"Re-encodes this ID with an updated instance value","summary":"<p>Re-encodes this ID with an updated instance value</p>","abstract":false,"args":[{"name":"new_value","doc":null,"default_value":"","external_name":"new_value","restriction":"UInt64"}],"args_string":"(new_value : UInt64)","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L187","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L187","def":{"name":"instance=","args":[{"name":"new_value","doc":null,"default_value":"","external_name":"new_value","restriction":"UInt64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@value = calculate_id(account_id(true), new_value, account_type, universe)"}},{"id":"lowest_bit-instance-method","html_id":"lowest_bit-instance-method","name":"lowest_bit","doc":"The lowest bit value of this `ID`. Used for encoding an `ID` into a\nstring of a given `Format`","summary":"<p>The lowest bit value of this <code><a href=\"../Steam/ID.html\">ID</a></code>.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L167","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L167","def":{"name":"lowest_bit","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Mask::LowestBit.extract_from(@value)"}},{"id":"to_s(format:Format=Format::Community64)-instance-method","html_id":"to_s(format:Format=Format::Community64)-instance-method","name":"to_s","doc":"Serializes this `ID` as the given `Format`","summary":"<p>Serializes this <code><a href=\"../Steam/ID.html\">ID</a></code> as the given <code><a href=\"../Steam/ID/Format.html\">Format</a></code></p>","abstract":false,"args":[{"name":"format","doc":null,"default_value":"Format::Community64","external_name":"format","restriction":"Format"}],"args_string":"(format : Format = <span class=\"t\">Format</span><span class=\"t\">::</span><span class=\"t\">Community64</span>)","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L130","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L130","def":{"name":"to_s","args":[{"name":"format","doc":null,"default_value":"Format::Community64","external_name":"format","restriction":"Format"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"String.build do |io|\n  to_s(io, format)\nend"}},{"id":"to_s(io:IO,format:Format=Format::Community64)-instance-method","html_id":"to_s(io:IO,format:Format=Format::Community64)-instance-method","name":"to_s","doc":"Serializes this `ID` as the given `Format`, writing to the given IO","summary":"<p>Serializes this <code><a href=\"../Steam/ID.html\">ID</a></code> as the given <code><a href=\"../Steam/ID/Format.html\">Format</a></code>, writing to the given IO</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"format","doc":null,"default_value":"Format::Community64","external_name":"format","restriction":"Format"}],"args_string":"(io : IO, format : Format = <span class=\"t\">Format</span><span class=\"t\">::</span><span class=\"t\">Community64</span>)","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L137","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L137","def":{"name":"to_s","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"format","doc":null,"default_value":"Format::Community64","external_name":"format","restriction":"Format"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Formatter.format(self, io) do\n  case format\n  when Format::Default\n    steam\n    universe\n    seperator\n    lowest_bit\n    seperator\n    account_id\n  when Format::Community32\n    bracket do\n      account_type\n      seperator\n      one\n      seperator\n      account_id(with_lowest_bit: true)\n    end\n  when Format::Community64\n    uint64\n  end\nend"}},{"id":"to_u64:UInt64-instance-method","html_id":"to_u64:UInt64-instance-method","name":"to_u64","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : UInt64","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L161","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L161","def":{"name":"to_u64","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@value"}},{"id":"universe-instance-method","html_id":"universe-instance-method","name":"universe","doc":"The `Universe` this `ID` belongs to","summary":"<p>The <code><a href=\"../Steam/ID/Universe.html\">Universe</a></code> this <code><a href=\"../Steam/ID.html\">ID</a></code> belongs to</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L202","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L202","def":{"name":"universe","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Universe.new(Mask::Universe.extract_from(@value))"}},{"id":"universe=(new_value:Universe)-instance-method","html_id":"universe=(new_value:Universe)-instance-method","name":"universe=","doc":"Re-encodes this ID with an updated `Universe`","summary":"<p>Re-encodes this ID with an updated <code><a href=\"../Steam/ID/Universe.html\">Universe</a></code></p>","abstract":false,"args":[{"name":"new_value","doc":null,"default_value":"","external_name":"new_value","restriction":"Universe"}],"args_string":"(new_value : Universe)","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L207","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L207","def":{"name":"universe=","args":[{"name":"new_value","doc":null,"default_value":"","external_name":"new_value","restriction":"Universe"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@value = calculate_id(account_id(true), instance, account_type, new_value)"}}],"macros":[],"types":[{"html_id":"github.com/z64/steam_id/Steam/ID/AccountType","path":"Steam/ID/AccountType.html","kind":"enum","full_name":"Steam::ID::AccountType","name":"AccountType","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/z64/steam_id/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"github.com/z64/steam_id/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/z64/steam_id/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/z64/steam_id/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"steam_id.cr","line_number":30,"url":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr"}],"repository_name":"github.com/z64/steam_id","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"Invalid","name":"Invalid","value":"0","doc":null,"summary":null},{"id":"Individual","name":"Individual","value":"1","doc":null,"summary":null},{"id":"Multiseat","name":"Multiseat","value":"2","doc":null,"summary":null},{"id":"GameServer","name":"GameServer","value":"3","doc":null,"summary":null},{"id":"AnonGameServer","name":"AnonGameServer","value":"4","doc":null,"summary":null},{"id":"Pending","name":"Pending","value":"5","doc":null,"summary":null},{"id":"ContentServer","name":"ContentServer","value":"6","doc":null,"summary":null},{"id":"Clan","name":"Clan","value":"7","doc":null,"summary":null},{"id":"Chat","name":"Chat","value":"8","doc":null,"summary":null},{"id":"P2PSuperSeeder","name":"P2PSuperSeeder","value":"9","doc":null,"summary":null},{"id":"AnonUser","name":"AnonUser","value":"10","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/z64/steam_id/Steam/ID","kind":"struct","full_name":"Steam::ID","name":"ID"},"doc":"Types of accounts a Steam ID can belong to","summary":"<p>Types of accounts a Steam ID can belong to</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"anon_game_server?-instance-method","html_id":"anon_game_server?-instance-method","name":"anon_game_server?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L35","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L35","def":{"name":"anon_game_server?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == AnonGameServer"}},{"id":"anon_user?-instance-method","html_id":"anon_user?-instance-method","name":"anon_user?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L41","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L41","def":{"name":"anon_user?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == AnonUser"}},{"id":"chat?-instance-method","html_id":"chat?-instance-method","name":"chat?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L39","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L39","def":{"name":"chat?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Chat"}},{"id":"clan?-instance-method","html_id":"clan?-instance-method","name":"clan?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L38","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L38","def":{"name":"clan?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Clan"}},{"id":"content_server?-instance-method","html_id":"content_server?-instance-method","name":"content_server?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L37","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L37","def":{"name":"content_server?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == ContentServer"}},{"id":"game_server?-instance-method","html_id":"game_server?-instance-method","name":"game_server?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L34","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L34","def":{"name":"game_server?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == GameServer"}},{"id":"individual?-instance-method","html_id":"individual?-instance-method","name":"individual?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L32","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L32","def":{"name":"individual?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Individual"}},{"id":"invalid?-instance-method","html_id":"invalid?-instance-method","name":"invalid?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L31","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L31","def":{"name":"invalid?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Invalid"}},{"id":"multiseat?-instance-method","html_id":"multiseat?-instance-method","name":"multiseat?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L33","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L33","def":{"name":"multiseat?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Multiseat"}},{"id":"p2_p_super_seeder?-instance-method","html_id":"p2_p_super_seeder?-instance-method","name":"p2_p_super_seeder?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L40","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L40","def":{"name":"p2_p_super_seeder?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == P2PSuperSeeder"}},{"id":"pending?-instance-method","html_id":"pending?-instance-method","name":"pending?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L36","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L36","def":{"name":"pending?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Pending"}}],"macros":[],"types":[]},{"html_id":"github.com/z64/steam_id/Steam/ID/Error","path":"Steam/ID/Error.html","kind":"class","full_name":"Steam::ID::Error","name":"Error","abstract":false,"superclass":{"html_id":"github.com/z64/steam_id/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/z64/steam_id/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/z64/steam_id/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/z64/steam_id/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"steam_id.cr","line_number":11,"url":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr"}],"repository_name":"github.com/z64/steam_id","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/z64/steam_id/Steam/ID","kind":"struct","full_name":"Steam::ID","name":"ID"},"doc":"Exception that is raised when parsing an `ID` fails","summary":"<p>Exception that is raised when parsing an <code><a href=\"../../Steam/ID.html\">ID</a></code> fails</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/z64/steam_id/Steam/ID/Format","path":"Steam/ID/Format.html","kind":"enum","full_name":"Steam::ID::Format","name":"Format","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/z64/steam_id/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"github.com/z64/steam_id/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/z64/steam_id/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/z64/steam_id/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"steam_id.cr","line_number":59,"url":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr"}],"repository_name":"github.com/z64/steam_id","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"Default","name":"Default","value":"0","doc":"The standard textual representation of a Steam ID. ex: `\"STEAM_1:0:11101\"`","summary":"<p>The standard textual representation of a Steam ID.</p>"},{"id":"Community32","name":"Community32","value":"1","doc":"A string format for short \"community\" URLs. ex: `\"[U:1:22202]\"`","summary":"<p>A string format for short \"community\" URLs.</p>"},{"id":"Community64","name":"Community64","value":"2","doc":"A 64 bit integer, represented as a string. ex: `\"76561197960287930\"`","summary":"<p>A 64 bit integer, represented as a string.</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/z64/steam_id/Steam/ID","kind":"struct","full_name":"Steam::ID","name":"ID"},"doc":"An enum for selecting the various formats a Steam ID can be parsed or\nserialized from.\n\nNOTE: Every format except for `Community64` are \"lossy\" formats and\ndoes not encode all possible information that can be stored in a Steam ID.\n\n**IDs that are parsed or serialized with these formats are missing the\nfollowing information:**\n- `Default` does not encode `AccountType` or instance\n- `Community32` does not encode `Universe` or instance","summary":"<p>An enum for selecting the various formats a Steam ID can be parsed or serialized from.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"community32?-instance-method","html_id":"community32?-instance-method","name":"community32?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L64","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L64","def":{"name":"community32?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Community32"}},{"id":"community64?-instance-method","html_id":"community64?-instance-method","name":"community64?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L67","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L67","def":{"name":"community64?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Community64"}},{"id":"default?-instance-method","html_id":"default?-instance-method","name":"default?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L61","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L61","def":{"name":"default?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Default"}}],"macros":[],"types":[]},{"html_id":"github.com/z64/steam_id/Steam/ID/Mask","path":"Steam/ID/Mask.html","kind":"struct","full_name":"Steam::ID::Mask","name":"Mask","abstract":false,"superclass":{"html_id":"github.com/z64/steam_id/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/z64/steam_id/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/z64/steam_id/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/z64/steam_id/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"mask.cr","line_number":56,"url":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/mask.cr"}],"repository_name":"github.com/z64/steam_id","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"AccountID","name":"AccountID","value":"Mask.new(31_u64, LowestBit)","doc":null,"summary":null},{"id":"AccountType","name":"AccountType","value":"Mask.new(4_u64, Instance)","doc":null,"summary":null},{"id":"Instance","name":"Instance","value":"Mask.new(20_u64, AccountID)","doc":null,"summary":null},{"id":"LowestBit","name":"LowestBit","value":"Mask.new(1_u64, 0)","doc":null,"summary":null},{"id":"Universe","name":"Universe","value":"Mask.new(8_u64, AccountType)","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/z64/steam_id/Steam/ID","kind":"struct","full_name":"Steam::ID","name":"ID"},"doc":"A `Mask` is used as basic wrapper around `UInt64` for performing\nbinary operations, specifically for composing the binary format\nof a Steam `ID`. Its namespace includes constants for each component of an\n`ID` that can be used to decode a `UInt64` with `#extract_from`.\n\n## Masks\n\n\n`LowestBit` - The first bit of the number. It is used only in encoding\na 64 bit ID into certain string formats.\n```\n0b0000000000000000000000000000000000000000000000000000000000000001\n```\n\n`AccountID` - The canonical ID of the account encoded in the ID\n```\n0b0000000000000000000000000000000011111111111111111111111111111110\n```\n\n`Instance` - The instance of the account\n```\n0b0000000000001111111111111111111100000000000000000000000000000000\n```\n\n`AccountType` - The type of this account. Abstracted as `ID::AccountType`\n```\n0b0000000011110000000000000000000000000000000000000000000000000000\n```\n\n`Universe` - The universe this account belongs to. Abstracted as `ID::Universe`\n```\n0b1111111100000000000000000000000000000000000000000000000000000000\n```\n\n### Example\n\n![example](https://imgur.com/rlvxB34.jpg)\n\n(Taken from [SteamID docs](https://developer.valvesoftware.com/wiki/SteamID#Format))\n\n```\nbinary = 0b00000001_0001_00000000000000000001_0000011111100010010111110100001_1\n#                 A    B                    C                               D E\n# A: Universe\nSteam::ID::Mask::Universe.extract_from(binary) # => 1\n# B: AccountType\nSteam::ID::Mask::AccountType.extract_from(binary) # => 1\n# C: Instance\nSteam::ID::Mask::Instance.extract_from(binary) # => 1\n# D: AccountID\nSteam::ID::Mask::AccountID.extract_from(binary) # => 66138017\n# E: LowestBit\nSteam::ID::Mask::LowestBit.extract_from(binary) # => 1\n```","summary":"<p>A <code><a href=\"../../Steam/ID/Mask.html\">Mask</a></code> is used as basic wrapper around <code>UInt64</code> for performing binary operations, specifically for composing the binary format of a Steam <code><a href=\"../../Steam/ID.html\">ID</a></code>.</p>","class_methods":[],"constructors":[{"id":"new(size:UInt64,offset:UInt64=0)-class-method","html_id":"new(size:UInt64,offset:UInt64=0)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"size","doc":null,"default_value":"","external_name":"size","restriction":"UInt64"},{"name":"offset","doc":null,"default_value":"0","external_name":"offset","restriction":"UInt64"}],"args_string":"(size : UInt64, offset : UInt64 = <span class=\"n\">0</span>)","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/mask.cr#L63","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/mask.cr#L63","def":{"name":"new","args":[{"name":"size","doc":null,"default_value":"","external_name":"size","restriction":"UInt64"},{"name":"offset","doc":null,"default_value":"0","external_name":"offset","restriction":"UInt64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(size, offset)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(size:UInt64,after:Mask)-class-method","html_id":"new(size:UInt64,after:Mask)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"size","doc":null,"default_value":"","external_name":"size","restriction":"UInt64"},{"name":"after","doc":null,"default_value":"","external_name":"after","restriction":"Mask"}],"args_string":"(size : UInt64, after : Mask)","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/mask.cr#L67","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/mask.cr#L67","def":{"name":"new","args":[{"name":"size","doc":null,"default_value":"","external_name":"size","restriction":"UInt64"},{"name":"after","doc":null,"default_value":"","external_name":"after","restriction":"Mask"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"new(size, after.size + after.offset)"}}],"instance_methods":[{"id":"extract_from(value:UInt64)-instance-method","html_id":"extract_from(value:UInt64)-instance-method","name":"extract_from","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"UInt64"}],"args_string":"(value : UInt64)","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/mask.cr#L71","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/mask.cr#L71","def":{"name":"extract_from","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"UInt64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(value & @mask) >> offset"}},{"id":"mask:UInt64-instance-method","html_id":"mask:UInt64-instance-method","name":"mask","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : UInt64","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/mask.cr#L61","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/mask.cr#L61","def":{"name":"mask","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UInt64","visibility":"Public","body":"@mask"}},{"id":"offset(value:UInt64)-instance-method","html_id":"offset(value:UInt64)-instance-method","name":"offset","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"UInt64"}],"args_string":"(value : UInt64)","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/mask.cr#L75","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/mask.cr#L75","def":{"name":"offset","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"UInt64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"value << @offset"}},{"id":"offset:UInt64-instance-method","html_id":"offset:UInt64-instance-method","name":"offset","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : UInt64","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/mask.cr#L59","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/mask.cr#L59","def":{"name":"offset","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UInt64","visibility":"Public","body":"@offset"}},{"id":"size:UInt64-instance-method","html_id":"size:UInt64-instance-method","name":"size","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : UInt64","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/mask.cr#L57","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/mask.cr#L57","def":{"name":"size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"UInt64","visibility":"Public","body":"@size"}}],"macros":[],"types":[]},{"html_id":"github.com/z64/steam_id/Steam/ID/Universe","path":"Steam/ID/Universe.html","kind":"enum","full_name":"Steam::ID::Universe","name":"Universe","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/z64/steam_id/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"github.com/z64/steam_id/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/z64/steam_id/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/z64/steam_id/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"steam_id.cr","line_number":15,"url":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr"}],"repository_name":"github.com/z64/steam_id","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"Individual","name":"Individual","value":"0","doc":null,"summary":null},{"id":"Public","name":"Public","value":"1","doc":null,"summary":null},{"id":"Beta","name":"Beta","value":"2","doc":null,"summary":null},{"id":"Internal","name":"Internal","value":"3","doc":null,"summary":null},{"id":"Dev","name":"Dev","value":"4","doc":null,"summary":null},{"id":"RC","name":"RC","value":"5","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/z64/steam_id/Steam/ID","kind":"struct","full_name":"Steam::ID","name":"ID"},"doc":"Universe identities a Steam ID can belong to","summary":"<p>Universe identities a Steam ID can belong to</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"beta?-instance-method","html_id":"beta?-instance-method","name":"beta?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L18","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L18","def":{"name":"beta?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Beta"}},{"id":"dev?-instance-method","html_id":"dev?-instance-method","name":"dev?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L20","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L20","def":{"name":"dev?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Dev"}},{"id":"individual?-instance-method","html_id":"individual?-instance-method","name":"individual?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L16","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L16","def":{"name":"individual?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Individual"}},{"id":"internal?-instance-method","html_id":"internal?-instance-method","name":"internal?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L19","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L19","def":{"name":"internal?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Internal"}},{"id":"public?-instance-method","html_id":"public?-instance-method","name":"public?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L17","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L17","def":{"name":"public?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Public"}},{"id":"rc?-instance-method","html_id":"rc?-instance-method","name":"rc?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L21","source_link":"https://github.com/z64/steam_id/blob/cad3ca0bd5cff3e46806d088007c661e75c17dea/src/steam_id.cr#L21","def":{"name":"rc?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == RC"}}],"macros":[],"types":[]}]}]}]}}